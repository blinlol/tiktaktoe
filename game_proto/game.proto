syntax = "proto3";

option go_package = "tiktaktoe/game_proto/game_proto";

enum Player {
    NONE = 0;
    ZERO = 1;
    CROSS = 2;
}

message StartRequest {

}

message StartResponse {
    int32 game_id = 1;
    Player iam = 2;
}

message Move {
    int32 row = 1;
    int32 col = 2;
    Player who = 3;
    string message = 4;
    bool finish = 5;
    Player winner = 6;
}

message MessageTime {
    string message = 1;
    string time = 2;
}







message GameClientMessage {
    int32 row = 10;
    int32 col = 11;
}

enum ServerMessageType {
    UNDEFINED = 0; // error
    INIT_PLAYER = 1; // send to player who is he
    MAKE_MOVE = 2; // say player to make move
    SAVE_MOVE = 3; // apply move 
    END_GAME = 4; // finish game
}

message GameServerMessage {
    string message = 1;
    int32 gameId = 2;
    ServerMessageType type = 3;
    Player who = 4;
    int32 row = 15;
    int32 col = 16;
}

service Game {
    // клиенты подключаются к серверу, сервер создает игру.
    // клиенты посылают свои желаемые ходы, а сервер подтверждает,
    // что ход возможен (пересылает этот же ход)
    // и затем посылает ход следующего игрока.
    // т.е. при получении хода сервер его выполняет, и посылает обратно обоим клиентам.
    rpc StartGame (StartRequest) returns (StartResponse) {}
    rpc MakeMove (stream Move) returns (stream Move) {}
    rpc Test (MessageTime) returns (MessageTime) {}

    // двунаправленный поток общения клиента и сервера, отвечает за 
    // 1. создание и подключение к игре
    // 2. определение кто за кого играет
    // 3. отправка сервером информации кто ходит следующим
    // 4. отправка клиентом хода и получение его на сервере
    // валидация хода происходит на сервере и клиенте, отвечает за это отдельный пакет
    rpc GameStream(stream GameClientMessage) returns (stream GameServerMessage) {}
}